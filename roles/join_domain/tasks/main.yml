# code: language=ansible
---
- name: "Test if all the hosts are avilable from ansible perspective (ssh access test)"
  ansible.builtin.ping:
  any_errors_fatal: true

- name: "Set hostname (FQDN is picked up from the inventory)"
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: "Edit /etc/hosts"
  ansible.builtin.template:
    src: "hosts.j2"
    dest: "/etc/hosts"
    owner: root
    group: root
    mode: "0644"
    backup: true

- name: "Test if DNS resolution works fine (resolve domain, the specific host and _ldap record)"
  ansible.builtin.debug:
    msg:
      - "{{ query('community.dns.lookup', join_domain_domain_name, search=false, type='A', nxdomain_handling='fail') }}"
      - "{{ query('community.dns.lookup', '_ldap._tcp.' + join_domain_domain_name, search=false, type='SRV', nxdomain_handling='fail') }}"
      - "{{ query('community.dns.lookup', inventory_hostname, search=false, type='A', nxdomain_handling='fail') }}"
  any_errors_fatal: true

- name: "Add the company linux repository if needed"
  ansible.builtin.apt_repository:
    repo: "{{ join_domain_repository_string }}"
    state: present
    update_cache: true
  when: join_domain_repository_string | length > 0

- name: "Make sure libsasl2-modules are not installed (to avoid further conflicts with realmd/sssd, it will be installed later with those components)"
  ansible.builtin.apt:
    name: libsasl2-modules
    state: absent

- name: "Install packages needed for joining a domain"
  ansible.builtin.apt:
    update_cache: true
    name:
      - adcli
      - realmd
      - sssd-ad
      - sssd-tools
      - sssd
      # - libnss-sss
      # - libpam-sss
      # - oddjob
      # - oddjob-mkhomedir
      # - samba-common-bin

- name: "Check the current list of realms (realm join operation will be performed only in case realm list is empty)"
  ansible.builtin.command: realm list
  register: realm_list_result
  changed_when: false
  ignore_errors: true

- name: "Show current realms"
  ansible.builtin.debug:
    msg: "{{ realm_list_result.stdout }}"
  when: realm_list_result.stdout_lines

- name: "Test if OS is already joined to the desired domain (BLOCK)"
  when: realm_list_result.stdout_lines and (join_domain_domain_name in realm_list_result.stdout_lines)
  block:
    - name: "Test if OS is already joined to the desired domain"
      ansible.builtin.debug:
        msg: "This OS is already joined domain {{ join_domain_domain_name }}! Stopping the play for the current host."

    - name: "Stop the play for the current host"
      ansible.builtin.meta: end_host

- name: "Test if OS is already joined to some other NON-desired domain(s) (BLOCK)"
  when: realm_list_result.stdout_lines and (join_domain_domain_name not in realm_list_result.stdout_lines)
  block:
    - name: "Test if OS is already joined to the desired domain"
      ansible.builtin.debug:
        msg: "This OS is already joined other domain(s)! Consider leaving the domain(s) first. Stopping the play for the current host."

    - name: "Stop the play for the current host"
      ansible.builtin.meta: end_host

- name: "Join domain block"
  when: not realm_list_result.stdout_lines
  block:
    - name: "Join domain"
      changed_when: false
      ansible.builtin.shell:
        cmd: >
          echo {{ join_domain_password }} | sudo /usr/sbin/realm join -v -U {{ join_domain_user }} --computer-ou
          {{ join_domain_target_ou_dn }} --computer-name {{ inventory_hostname_short }}
          --os-name {{ ansible_facts['distribution'] }} --os-version {{ ansible_facts['distribution_version'] }}
          {{ join_domain_domain_name }}
        executable: /bin/bash
      no_log: false
      ignore_errors: true
      register: join_result

    - name: "Successful join message"
      ansible.builtin.debug:
        msg: "Successfully joined {{ join_domain_domain_name }}"
      when: join_result.rc == 0

    - name: "Failed join message"
      ansible.builtin.debug:
        msg: "FAILED to join {{ join_domain_domain_name }}!!!"
      when: join_result.rc != 0

- name: "Configure access control and sudoers"
  when: >
    (join_domain_allow_login_groups | length > 0 and join_result.rc == 0)  or
    (join_domain_allow_login_users | length > 0 and join_result.rc == 0) or
    (join_domain_sudoers_groups_list | length > 0 and join_result.rc == 0)
  notify:
    - "Restart SSSD"
  block:
    - name: "Change access provider from \"ad\" to \"simple\""
      ansible.builtin.lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^access_provider'
        line: 'access_provider = simple'
        state: present

    - name: "Configure AD GPO access control"
      when: join_domain_ad_gpo_access | length > 0
      ansible.builtin.lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^ad_gpo_access_control'
        line: 'ad_gpo_access_control = {{ join_domain_ad_gpo_access }}'
        state: present

    - name: Add use_fully_qualified_names line
      ansible.builtin.lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^use_fully_qualified_names'
        line: 'use_fully_qualified_names = False'
        state: present

    - name: "Restrict SSSD login capabilities to the specified AD groups"
      when: join_domain_allow_login_groups | length > 0
      ansible.builtin.lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^simple_allow_groups'
        line: 'simple_allow_groups = {{ join_domain_allow_login_groups }}'
        state: present

    - name: "Restrict SSSD login capabilities to the specified AD users"
      when: join_domain_allow_login_users | length > 0
      ansible.builtin.lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^simple_allow_users'
        line: 'simple_allow_users = {{ join_domain_allow_login_users }}'
        state: present

    - name: "Configure AD groups as sudoers in file /etc/sudoers.d/sssd-groups"
      when: join_domain_sudoers_groups_list | length > 0
      ansible.builtin.template:
        src: sudoers.j2
        dest: /etc/sudoers.d/sssd-groups
        owner: root
        group: root
        mode: '0400'

- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers
